import { useState } from "react";
import { useAuth } from "@/hooks/use-auth";
import { useToast } from "@/hooks/use-toast";
import { Redirect } from "wouter";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { SOCIETY_SECTORS, REFERRAL_SOURCES, CHURCH_DENOMINATIONS } from "@shared/schema";

import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { CalendarIcon } from "lucide-react";
import { Calendar } from "@/components/ui/calendar";
import { cn } from "@/lib/utils";
import { format } from "date-fns";
import { nl } from "date-fns/locale";

const loginSchema = z.object({
  username: z.string().email("Vul een geldig e-mailadres in"),
  password: z.string().min(6, "Wachtwoord moet ten minste 6 tekens bevatten"),
});

const registerSchema = z.object({
  firstName: z.string().min(2, "Voornaam moet ten minste 2 tekens bevatten"),
  lastName: z.string().min(2, "Achternaam moet ten minste 2 tekens bevatten"),
  email: z.string().email("Ongeldig e-mailadres"),
  password: z.string().min(6, "Wachtwoord moet ten minste 6 tekens bevatten"),
  birthDate: z.date().optional().nullable(),
  country: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  currentSector: z.string().optional().nullable(),
  preferredSector: z.string().optional().nullable(),
  referralSource: z.string().optional().nullable(),
  isTeamLeader: z.boolean().default(false),
  denomination: z.string().optional(),
  churchName: z.string().optional(),
  churchLocation: z.string().optional(),
  inviteCode: z.string().optional(),
});

type LoginFormValues = z.infer<typeof loginSchema>;
type RegisterFormValues = z.infer<typeof registerSchema>;

export default function AuthPage() {
  const { user, loginMutation, registerMutation } = useAuth();
  const { toast } = useToast();
  const [activeTab, setActiveTab] = useState("login");
  const [isTeamLeader, setIsTeamLeader] = useState(false);
  
  // Form for login
  const loginForm = useForm<LoginFormValues>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      username: "",
      password: "",
    },
  });

  // Form for register
  const registerForm = useForm<RegisterFormValues>({
    resolver: zodResolver(registerSchema),
    defaultValues: {
      firstName: "",
      lastName: "",
      email: "",
      password: "",
      birthDate: null,
      country: null,
      city: null,
      currentSector: null,
      preferredSector: null,
      referralSource: null,
      isTeamLeader: false,
      denomination: "",
      churchName: "",
      churchLocation: "",
      inviteCode: "",
    },
  });

  // If already logged in, redirect to home
  if (user) {
    return <Redirect to="/" />;
  }

  // Handle login form submission
  const onLoginSubmit = (data: LoginFormValues) => {
    loginMutation.mutate(data);
  };

  // Handle register form submission
  const onRegisterSubmit = (data: RegisterFormValues) => {
    // Process the data and submit
    const formattedBirthDate = data.birthDate ? format(data.birthDate, 'yyyy-MM-dd') : null;
    
    registerMutation.mutate({
      ...data,
      birthDate: formattedBirthDate,
      role: data.isTeamLeader ? "teamleader" : "user",
    });
  };

  // Handle team leader toggle
  const handleTeamLeaderChange = (checked: boolean) => {
    setIsTeamLeader(checked);
    registerForm.setValue("isTeamLeader", checked);
  };

  return (
    <div className="min-h-screen flex flex-col md:flex-row">
      {/* Left side - Auth forms */}
      <div className="md:w-1/2 flex items-center justify-center p-8">
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle className="text-2xl font-bold text-center">Bedieningen Profiel</CardTitle>
            <CardDescription className="text-center">
              {activeTab === "login" ? "Log in op je account" : "Maak een nieuw account aan"}
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
              <TabsList className="grid w-full grid-cols-2 mb-6">
                <TabsTrigger value="login">Inloggen</TabsTrigger>
                <TabsTrigger value="register">Registreren</TabsTrigger>
              </TabsList>

              {/* Login Form */}
              <TabsContent value="login">
                <Form {...loginForm}>
                  <form onSubmit={loginForm.handleSubmit(onLoginSubmit)} className="space-y-4">
                    <FormField
                      control={loginForm.control}
                      name="username"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>E-mailadres</FormLabel>
                          <FormControl>
                            <Input type="email" placeholder="Vul je e-mailadres in" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={loginForm.control}
                      name="password"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Wachtwoord</FormLabel>
                          <FormControl>
                            <Input type="password" placeholder="Vul je wachtwoord in" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <Button type="submit" className="w-full" disabled={loginMutation.isPending}>
                      {loginMutation.isPending ? "Bezig met inloggen..." : "Inloggen"}
                    </Button>
                  </form>
                </Form>
              </TabsContent>

              {/* Register Form */}
              <TabsContent value="register">
                <Form {...registerForm}>
                  <form onSubmit={registerForm.handleSubmit(onRegisterSubmit)} className="space-y-4">
                    {/* Basic Info */}
                    <div className="grid grid-cols-2 gap-4">
                      <FormField
                        control={registerForm.control}
                        name="firstName"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Voornaam</FormLabel>
                            <FormControl>
                              <Input placeholder="Voornaam" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={registerForm.control}
                        name="lastName"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Achternaam</FormLabel>
                            <FormControl>
                              <Input placeholder="Achternaam" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>

                    <FormField
                      control={registerForm.control}
                      name="email"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>E-mailadres</FormLabel>
                          <FormControl>
                            <Input type="email" placeholder="E-mailadres" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={registerForm.control}
                      name="password"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Wachtwoord</FormLabel>
                          <FormControl>
                            <Input type="password" placeholder="Wachtwoord" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    {/* Birthday */}
                    <FormField
                      control={registerForm.control}
                      name="birthDate"
                      render={({ field }) => (
                        <FormItem className="flex flex-col">
                          <FormLabel>Geboortedatum</FormLabel>
                          <div className="grid grid-cols-3 gap-2">
                            <Select
                              onValueChange={(value) => {
                                const date = field.value ? new Date(field.value) : new Date();
                                date.setDate(15); // Set to middle of month to avoid date validation issues
                                date.setFullYear(parseInt(value));
                                field.onChange(date.toISOString());
                              }}
                              value={field.value ? new Date(field.value).getFullYear().toString() : ""}
                              defaultValue=""
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Jaar" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                {Array.from({ length: 100 }, (_, i) => (
                                  <SelectItem key={i} value={(new Date().getFullYear() - i).toString()}>
                                    {new Date().getFullYear() - i}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                            
                            <Select
                              onValueChange={(value) => {
                                const date = field.value ? new Date(field.value) : new Date();
                                date.setDate(15); // Set to middle of month to avoid date validation issues
                                date.setMonth(parseInt(value));
                                field.onChange(date.toISOString());
                              }}
                              value={field.value ? new Date(field.value).getMonth().toString() : ""}
                              defaultValue=""
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Maand" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                {["Januari", "Februari", "Maart", "April", "Mei", "Juni", "Juli", "Augustus", "September", "Oktober", "November", "December"].map((month, i) => (
                                  <SelectItem key={i} value={i.toString()}>
                                    {month}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                            
                            <Select
                              onValueChange={(value) => {
                                const date = field.value ? new Date(field.value) : new Date();
                                date.setDate(parseInt(value));
                                field.onChange(date.toISOString());
                              }}
                              value={field.value ? new Date(field.value).getDate().toString() : ""}
                              defaultValue=""
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Dag" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                {Array.from({ length: 31 }, (_, i) => (
                                  <SelectItem key={i} value={(i + 1).toString()}>
                                    {i + 1}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                          </div>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    {/* Location */}
                    <div className="grid grid-cols-2 gap-4">
                      <FormField
                        control={registerForm.control}
                        name="country"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Land</FormLabel>
                            <FormControl>
                              <Input placeholder="Vul uw land in" value={field.value || ""} onChange={field.onChange} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={registerForm.control}
                        name="city"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Stad</FormLabel>
                            <FormControl>
                              <Input placeholder="Vul uw stad in" value={field.value || ""} onChange={field.onChange} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>

                    {/* Sector Selection */}
                    <div className="grid grid-cols-2 gap-4">
                      <FormField
                        control={registerForm.control}
                        name="currentSector"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Huidige sector</FormLabel>
                            <Select 
                              onValueChange={field.onChange} 
                              value={field.value || ""}
                              defaultValue=""
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Selecteer sector" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                {SOCIETY_SECTORS.map((sector) => (
                                  <SelectItem key={sector} value={sector}>
                                    {sector}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={registerForm.control}
                        name="preferredSector"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Voorkeur sector</FormLabel>
                            <Select 
                              onValueChange={field.onChange} 
                              value={field.value || ""}
                              defaultValue=""
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Selecteer sector" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                {SOCIETY_SECTORS.map((sector) => (
                                  <SelectItem key={sector} value={sector}>
                                    {sector}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>

                    {/* Referral Source */}
                    <FormField
                      control={registerForm.control}
                      name="referralSource"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Hoe ken je ons?</FormLabel>
                          <Select 
                            onValueChange={field.onChange} 
                            value={field.value || ""}
                            defaultValue=""
                          >
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Hoe heeft u ons gevonden?" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              {REFERRAL_SOURCES.map((source) => (
                                <SelectItem key={source} value={source}>
                                  {source}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    {/* Team Leader Checkbox */}
                    <FormField
                      control={registerForm.control}
                      name="isTeamLeader"
                      render={({ field }) => (
                        <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4">
                          <FormControl>
                            <Checkbox
                              checked={field.value}
                              onCheckedChange={(checked) => {
                                field.onChange(checked);
                                handleTeamLeaderChange(checked === true);
                              }}
                            />
                          </FormControl>
                          <div className="space-y-1 leading-none">
                            <FormLabel>Ik ben een teamleider</FormLabel>
                          </div>
                        </FormItem>
                      )}
                    />

                    {/* Church Information (only visible if isTeamLeader is true) */}
                    {isTeamLeader && (
                      <div className="space-y-4 border p-4 rounded-md">
                        <h3 className="font-medium">Kerk Informatie</h3>
                        <FormField
                          control={registerForm.control}
                          name="denomination"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Denominatie</FormLabel>
                              <Select 
                                onValueChange={field.onChange} 
                                value={field.value || ""}
                                defaultValue=""
                              >
                                <FormControl>
                                  <SelectTrigger>
                                    <SelectValue placeholder="Selecteer denominatie" />
                                  </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                  {CHURCH_DENOMINATIONS.map((denomination) => (
                                    <SelectItem key={denomination} value={denomination}>
                                      {denomination}
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        <FormField
                          control={registerForm.control}
                          name="churchName"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Naam van de kerk</FormLabel>
                              <FormControl>
                                <Input placeholder="Naam van de kerk" value={field.value || ""} onChange={field.onChange} />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        <FormField
                          control={registerForm.control}
                          name="churchLocation"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Locatie van de kerk</FormLabel>
                              <FormControl>
                                <Input placeholder="Stad/plaats van de kerk" value={field.value || ""} onChange={field.onChange} />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </div>
                    )}

                    {/* Invite Code */}
                    <FormField
                      control={registerForm.control}
                      name="inviteCode"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Uitnodigingscode (optioneel)</FormLabel>
                          <FormControl>
                            <Input placeholder="Vul een uitnodigingscode in" value={field.value || ""} onChange={field.onChange} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <Button type="submit" className="w-full" disabled={registerMutation.isPending}>
                      {registerMutation.isPending ? "Bezig met registreren..." : "Registreren"}
                    </Button>
                  </form>
                </Form>
              </TabsContent>
            </Tabs>
          </CardContent>
          <CardFooter className="flex justify-center">
            <p className="text-sm text-muted-foreground">
              {activeTab === "login" ? (
                <>
                  Nog geen account?{" "}
                  <button
                    type="button"
                    className="text-primary hover:underline"
                    onClick={() => setActiveTab("register")}
                  >
                    Registreer hier
                  </button>
                </>
              ) : (
                <>
                  Heb je al een account?{" "}
                  <button
                    type="button"
                    className="text-primary hover:underline"
                    onClick={() => setActiveTab("login")}
                  >
                    Log hier in
                  </button>
                </>
              )}
            </p>
          </CardFooter>
        </Card>
      </div>

      {/* Right side - Hero section */}
      <div className="md:w-1/2 bg-primary p-8 flex items-center justify-center text-white">
        <div className="max-w-lg">
          <h1 className="text-4xl font-bold mb-6">Bedieningen Profiel</h1>
          <p className="text-xl mb-6">
            Ontdek uw gaven en hoe u effectief kunt bijdragen aan het Koninkrijk van God door het profiel van uw bediening te begrijpen.
          </p>
          <div className="space-y-4">
            <div className="flex items-start">
              <div className="bg-white/20 p-2 rounded-full mr-4">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                </svg>
              </div>
              <div>
                <h3 className="font-bold">Volg Persoonlijkheidsanalyse</h3>
                <p>Ontdek uw unieke roeping en geestesgaven.</p>
              </div>
            </div>
            <div className="flex items-start">
              <div className="bg-white/20 p-2 rounded-full mr-4">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                </svg>
              </div>
              <div>
                <h3 className="font-bold">Bekijk Teamanalyse</h3>
                <p>Krijg inzicht in de sterke punten en lacunes van uw team.</p>
              </div>
            </div>
            <div className="flex items-start">
              <div className="bg-white/20 p-2 rounded-full mr-4">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                </svg>
              </div>
              <div>
                <h3 className="font-bold">Ontvang Aanbevelingen</h3>
                <p>Krijg gepersonaliseerde aanbevelingen om uw bediening te verbeteren.</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}